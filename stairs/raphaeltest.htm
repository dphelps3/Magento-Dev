<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        <title>Raphael Test</title>
		<style type="text/css">	
			body {
				background: #fff;
				color: #000;
				font: 300 100.1% "Helvetica Neue", Helvetica, "Arial Unicode MS", Arial, sans-serif;
			}
			#holder {
				height: 700px;
				left: 10%;
				top: 10%;
				width: 900px;
			}
			#copy {
				bottom: 0;
				font: 300 .7em "Helvetica Neue", Helvetica, "Arial Unicode MS", Arial, sans-serif;
				position: absolute;
				right: 1em;
				text-align: right;
			}
			#copy a {
				color: #fff;
			}
		</style>
        <script src="jquery-2.1.1.min.js" type="text/javascript"></script>
		<script src="jquery.mousewheel.min.js" type="text/javascript"></script>
		<script src="underscore-min.js" type="text/javascript"></script>
		<script src="raphael-min.js" type="text/javascript"></script>
		<script src="raphael-zp.js" type="text/javascript"></script>
		<script src="bezier.js" type="text/javascript"></script>
        <script type="text/javascript">
            window.onload = function () {
                var r = Raphael("holder", 900, 700),
                    discattr = {fill: "#000", stroke: "none"};
                r.ZP();
                r.text(310, 20, "Drag the points to change the curves").attr({fill: "#000", "font-size": 16});
                function curve(x, y, ax, ay, bx, by, zx, zy, color, width) {
					
							console.log(BezierLength(x, y, ax, ay, bx, by, zx, zy));
						
                    var path = [["M", x, y], ["C", ax, ay, bx, by, zx, zy]],
                        path2 = [["M", x, y], ["L", ax, ay], ["M", bx, by], ["L", zx, zy]],
						curve = r.path(path).attr({stroke: color || Raphael.getColor(), "stroke-width": width, "stroke-linecap": "square"}),
						controls = r.set(
                            r.path(path2).attr({stroke: "#7777dd", "stroke-dasharray": ". "}),
                            r.circle(x, y, 5).attr(discattr),
                            r.circle(ax, ay, 5).attr(discattr),
                            r.circle(bx, by, 5).attr(discattr),
                            r.circle(zx, zy, 5).attr(discattr)
                        );
											
                    controls[1].update = function (x, y) {
					    var X = this.attr("cx") + x,
                            Y = this.attr("cy") + y;
						this.attr({cx: X, cy: Y});	
                        path[0][1] = X;
                        path[0][2] = Y;
                        path2[0][1] = X;
                        path2[0][2] = Y;
						
						controls[2].update(x, y);
                    };
                    controls[2].update = function (x, y) {
                        var X = this.attr("cx") + x,
                            Y = this.attr("cy") + y;
                        this.attr({cx: X, cy: Y});
                        path[1][1] = X;
                        path[1][2] = Y;
                        path2[1][1] = X;
                        path2[1][2] = Y;
                        curve.attr({path: path});
						
                        controls[0].attr({path: path2});
                    };
                    controls[3].update = function (x, y) {
                        var X = this.attr("cx") + x,
                            Y = this.attr("cy") + y;
                        this.attr({cx: X, cy: Y});
                        path[1][3] = X;
                        path[1][4] = Y;
                        path2[2][1] = X;
                        path2[2][2] = Y;
                        curve.attr({path: path});
                        controls[0].attr({path: path2});
                    };
                    controls[4].update = function (x, y) {
                        var X = this.attr("cx") + x,
                            Y = this.attr("cy") + y;
                        this.attr({cx: X, cy: Y});
                        path[1][5] = X;
                        path[1][6] = Y;
                        path2[3][1] = X;
                        path2[3][2] = Y;
                        controls[3].update(x, y);
                    };
                    controls.drag(move, up);
                }
                function move(dx, dy) {
                    this.update(dx - (this.dx || 0), dy - (this.dy || 0));
                    this.dx = dx;
                    this.dy = dy;
                }
                function up() {
                    this.dx = this.dy = 0;
                }
                curve(70, 100, 110, 100, 130, 200, 170, 200, "hsb(0, .75, .75)", 4);
                
				
            };
        </script>
    </head>
    <body>
        <div id="holder"></div>
</html>
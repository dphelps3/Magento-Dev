<?php if ($this->getCanUseRewardPoints()): ?>
    <dl class="sp-methods checkout-reward checkout-onepage-payment-additional-reward" id="reward_placer">
        <dt>
            <input type="checkbox" name="payment[use_reward_points]" value="1" id="ait_use_reward_points" <?php echo $this->useRewardPoints()?' checked="checked"':'' ?> class="checkbox" onclick = "payment.switchRewardPointsCheckbox();" />
            <label for="ait_use_reward_points"><?php echo Mage::helper('enterprise_reward')->__('Use my reward points, %s available', Mage::helper('enterprise_reward')->formatReward($this->getPointsBalance(), $this->getCurrencyAmount())); ?></label>
        </dt>
    </dl>
<?php endif; ?>
    <script type="text/javascript">
    //<![CDATA[
	
	<?php if ((float)$this->getCanUseRewardPoints()): ?>
    quoteBaseGrandTotal = <?php echo (float)$this->getQuote()->getBaseGrandTotal(); ?>;
    <?php endif; ?>
    /*something weird*/
    //checkQuoteBaseGrandTotal = quoteBaseGrandTotal;
	
    var isEnoughPointsToCoverAmount = <?php if ($this->isEnoughPoints()): ?>true<?php else: ?>false<?php endif; ?>;
    var rewardPointsSubstracted = <?php if ($this->useRewardPoints()): ?>true<?php else: ?>false<?php endif; ?>;

    if (rewardPointsSubstracted) {
        quoteBaseGrandTotal += <?php echo (float)$this->getQuote()->getBaseRewardCurrencyAmount(); ?>;
        checkQuoteBaseGrandTotal = quoteBaseGrandTotal;
        rewardPointsSubstracted = false;
    }

    Payment.prototype.switchRewardPointsCheckbox = function() {
        if (!rewardPointsSubstracted && $('ait_use_reward_points') && $('ait_use_reward_points').checked) {
            quoteBaseGrandTotal -= <?php echo (float)$this->getCurrencyAmount(); ?>;
            rewardPointsSubstracted = true;
            checkQuoteBaseGrandTotal = quoteBaseGrandTotal;
        }
        if (rewardPointsSubstracted && $('ait_use_reward_points') && !$('ait_use_reward_points').checked) {
            quoteBaseGrandTotal += <?php echo (float)$this->getCurrencyAmount(); ?>;
            rewardPointsSubstracted = false;
            checkQuoteBaseGrandTotal = quoteBaseGrandTotal;
        }
        if (((checkQuoteBaseGrandTotal < 0.0001 || checkQuoteBaseGrandTotal > 0.0001) && quoteBaseGrandTotal == 0) || (quoteBaseGrandTotal > checkQuoteBaseGrandTotal)) {
            quoteBaseGrandTotal = checkQuoteBaseGrandTotal;
        }
        if (quoteBaseGrandTotal < 0.0001) {
            var elements = Form.getElements(this.form);
            for (var i=0; i<elements.length; i++) {
                if ($('ait_use_reward_points') && $('ait_use_reward_points').checked) {
                    if (elements[i].name == 'payment[method]') {
                        elements[i].disabled = true;
                    }
                }
                if (elements[i].name == 'payment[method]' && elements[i].value == 'free') {
                    if ($('ait_use_reward_points') && $('ait_use_reward_points').checked) {
                        elements[i].checked = true;
                        elements[i].disabled = false;
                        $(elements[i].parentNode).show();
                        payment.switchMethod('free');
                    } else {
                        elements[i].checked = false;
                        elements[i].disabled = true;
                        $(elements[i].parentNode).hide();
                    }
                }
            }
            if ($('ait_use_reward_points') && $('ait_use_reward_points').checked) {
                $('checkout-payment-method-load').hide();
                payment.switchMethod();
            } else {
                $('checkout-payment-method-load').show();
                payment.switchMethod(payment.lastUsedMethod);
            }
        } else {
            var elements = Form.getElements(this.form);
            for (var i=0; i<elements.length; i++) {
                if (elements[i].name == 'payment[method]') {
                    elements[i].disabled = false;
                }
            }
            $('checkout-payment-method-load').show();
            payment.switchMethod(payment.lastUsedMethod);
        }
    }
    if (payment) {
        var rewardPaymentInit = function() {
            if ($('ait_use_reward_points')) {
                $('ait_use_reward_points').disabled = false;
            }
            this.switchRewardPointsCheckbox();
        }
        payment.addAfterInitFunction('reward', rewardPaymentInit.bind(payment));
        var rewardPaymentValidate = function() {
            if (quoteBaseGrandTotal < 0.0001) {
                return true;
            }
            return false;
        }
        payment.addBeforeValidateFunction('reward', rewardPaymentValidate.bind(payment));
    }
    //Event.observe($('ait_use_reward_points'), 'click', payment.switchRewardPointsCheckbox);

    aitCheckout.createStep('reward',{}, {
        doCheckErrors : false,
        isLoadWaiting : false,
        isUpdateOnReload : false,
        container: 'reward_placer',
        ids: {}
        }
    );
//]]>
</script>
<?php if ($this->isDisplayContainer()): ?>
    <div class="checkout-onepage-payment-additional-customerbalance" id="customerbalance_placer">
        <input type="hidden" name="payment[use_customer_balance]" value="0" />
        <input type="checkbox" class="checkbox" name="payment[use_customer_balance]" value="1" id="ait_use_customer_balance" <?php echo ($this->isCustomerBalanceUsed() ? 'checked' : '') ?> onclick = "payment.switchCustomerBalanceCheckbox();"/>

        <?php $balance = Mage::helper('core')->currency($this->getBalance()); ?>
        <label for="ait_use_customer_balance">
        <strong>
            <?php echo Mage::helper('enterprise_customerbalance')->__('Use Store Credit'); ?>
            (<span id="customerbalance_available_amount"><?php echo $balance; ?></span>
            <?php echo Mage::helper('enterprise_customerbalance')->__('available'); ?>)
        </strong>
        </label>
    </div>
<?php endif; ?>
<script type="text/javascript">
//<![CDATA[
isFullyPaidAfterCustomerBalanceApplication = <?php echo ($this->isFullyPaidAfterApplication() ? 'true' : 'false'); ?>;
quoteBaseGrandTotal = <?php echo (float)$this->getQuote()->getBaseGrandTotal(); ?>;

<?php if ($this->isAllowed()): ?>
function setCustomerBalanceAvailable(balance, formattedBalance) {
    if ($('customerbalance_placer')) {
        if (balance == 0) {
            $('ait_use_customer_balance').checked = false;
            $('ait_use_customer_balance').disabled = true;
            $('customerbalance_placer').hide();
        } else {
            $('ait_use_customer_balance').disabled = false;
            $('customerbalance_placer').show();
        }
    }

    if ($('customerbalance_available_amount')) {
        $('customerbalance_available_amount').innerHTML = formattedBalance;
    }
}

//setCustomerBalanceAvailable('<?php echo $this->getBalance(); ?>', '<?php echo Mage::helper('core')->currency($this->getBalance()); ?>');
<?php endif;?>
/*something weird*/
checkQuoteBaseGrandTotal = quoteBaseGrandTotal;

var isFullyPaidAfterCustomerBalanceApplication = <?php echo ($this->isFullyPaidAfterApplication() ? 'true' : 'false'); ?>;
var customerBalanceSubstracted = <?php if ($this->isCustomerBalanceUsed()): ?>true<?php else: ?>false<?php endif; ?>;

if (customerBalanceSubstracted) {
    quoteBaseGrandTotal += <?php echo (float)$this->getQuote()->getBaseCustomerBalAmountUsed(); ?>;
    checkQuoteBaseGrandTotal = quoteBaseGrandTotal;
    customerBalanceSubstracted = false;
}

Payment.prototype.switchCustomerBalanceCheckbox = function() {

    if (!customerBalanceSubstracted && $('ait_use_customer_balance')&&$('ait_use_customer_balance').checked) {
        quoteBaseGrandTotal -= <?php echo (float)$this->getBalance(); ?>;
        customerBalanceSubstracted = true;
        checkQuoteBaseGrandTotal = quoteBaseGrandTotal;
    }
    if (customerBalanceSubstracted && $('ait_use_customer_balance')&&!$('ait_use_customer_balance').checked) {
        quoteBaseGrandTotal += <?php echo (float)$this->getBalance(); ?>;
        customerBalanceSubstracted = false;
        checkQuoteBaseGrandTotal = quoteBaseGrandTotal;
    }
    if (((checkQuoteBaseGrandTotal < 0.0001 || checkQuoteBaseGrandTotal > 0.0001) && quoteBaseGrandTotal == 0) || (quoteBaseGrandTotal > checkQuoteBaseGrandTotal)) {
        quoteBaseGrandTotal = checkQuoteBaseGrandTotal;
    }

    if (quoteBaseGrandTotal < 0.0001) {
        var elements = Form.getElements(this.form);
        for (var i=0; i<elements.length; i++) {
            if ($('ait_use_customer_balance') && $('ait_use_customer_balance').checked) {
                if (elements[i].name == 'payment[method]') {
                    elements[i].disabled = true;
                }
            }
            if (elements[i].name == 'payment[method]' && elements[i].value == 'free') {
                if ($('ait_use_customer_balance') && $('ait_use_customer_balance').checked) {
                    elements[i].checked = true;
                    elements[i].disabled = false;
                    $(elements[i].parentNode).show();
                    payment.switchMethod('free');
                } else {
                    elements[i].checked = false;
                    elements[i].disabled = true;
                    $(elements[i].parentNode).hide();
                }
            }
        }
        if ($('ait_use_customer_balance')&&$('ait_use_customer_balance').checked) {
            $('checkout-payment-method-load').hide();
            payment.switchMethod();
        }
    } else {
        var elements = Form.getElements(this.form);
        for (var i=0; i<elements.length; i++) {
            if (elements[i].name == 'payment[method]') {
                elements[i].disabled = false;
            }
        }
        $('checkout-payment-method-load').show();
       
        payment.switchMethod(payment.lastUsedMethod);
    }

}

if (payment) {
    var customerBalanceInit = function() {
        if ($('ait_use_customer_balance')) {
            $('ait_use_customer_balance').disabled = false;
        }
        this.switchCustomerBalanceCheckbox();
    }
    payment.addAfterInitFunction('customerbalance', customerBalanceInit.bind(payment));
    var customerBalanceValidate = function() {
        if (quoteBaseGrandTotal < 0.0001) {
            return true;
        }
        return false;
    }
    payment.addBeforeValidateFunction('customerbalance', customerBalanceValidate.bind(payment));
}

//Event.observe($('ait_use_customer_balance'), 'click', payment.switchCustomerBalanceCheckbox);

    aitCheckout.createStep('customerbalance',{}, {
        doCheckErrors : false,
        isLoadWaiting : false,
        isUpdateOnReload : false,
        container: 'customerbalance_placer',
        ids: {}
        }
    );
//]]>
</script>